package io.github.xhstormr.burp.core

import burp.IBurpExtenderCallbacks
import burp.IExtensionHelpers
import burp.IHttpRequestResponse
import burp.IScanIssue
import burp.IScannerCheck
import burp.IScannerInsertionPoint
import io.github.xhstormr.burp.core.model.ProfileType

class BurpScannerCheck(
    private val helpers: IExtensionHelpers,
    private val burpExtender: IBurpExtenderCallbacks,
    private val burpPanelHelper: BurpPanelHelper,
) : IScannerCheck {

    override fun doPassiveScan(
        baseRequestResponse: IHttpRequestResponse
    ): List<IScanIssue>? {
        val scanners = burpPanelHelper.profileMap[ProfileType.Passive] ?: return null
        return scanners.mapNotNull { it.scan(baseRequestResponse) }
    }

    override fun doActiveScan(
        baseRequestResponse: IHttpRequestResponse,
        insertionPoint: IScannerInsertionPoint
    ): List<IScanIssue>? {
        // val requestHighlights: MutableList<IntArray> = ArrayList(1)
        // requestHighlights.add(insertionPoint.getPayloadOffsets(INJ_TEST))
        //
        // val checkRequest = insertionPoint.buildRequest(INJ_TEST)
        // val checkRequest = helpers.buildHttpMessage()
        // val httpRequest = instance.makeHttpRequest(baseRequestResponse.httpService, checkRequest)
        // val requestResponseWithMarkers = instance.applyMarkers()

        println("==========")
        println("doActiveScan")
        val request = helpers.analyzeRequest(baseRequestResponse)
        val response = helpers.analyzeResponse(baseRequestResponse.response)
        println(request.url)
        println(response.statusCode)
        println(insertionPoint)
        println("insertionPoint.baseValue: " + insertionPoint.baseValue)
        println("insertionPoint.insertionPointName: " + insertionPoint.insertionPointName)
        println("insertionPoint.insertionPointType: " + insertionPoint.insertionPointType)

        /**/

        // // make a request containing our injection test in the insertion point
        // val checkRequest = insertionPoint.buildRequest(INJ_TEST)
        //
        // val request = helpers.analyzeRequest(checkRequest)
        //
        // val body = checkRequest.sliceArray(request.bodyOffset..checkRequest.lastIndex)
        //
        // val headers = request.headers
        // headers.add("ABCD:1234")
        //
        // val checkRequest2 = helpers.buildHttpMessage(headers, body)
        //
        // val checkRequestResponse = instance.makeHttpRequest(baseRequestResponse.httpService, checkRequest2)
        //
        // // look for matches of our active check grep string
        // val matches = getMatches(checkRequestResponse.response, INJ_ERROR)
        // return if (matches.isNotEmpty()) {
        //     // get the offsets of the payload within the request, for in-UI highlighting
        //     val requestHighlights = mutableListOf<IntArray>()
        //     requestHighlights.add(insertionPoint.getPayloadOffsets(INJ_TEST))
        //
        //     // report the issue
        //     listOf(
        //         CustomScanIssue(
        //             checkRequestResponse.httpService,
        //             helpers.analyzeRequest(checkRequestResponse).url,
        //             arrayOf(instance.applyMarkers(checkRequestResponse, requestHighlights, matches)),
        //             "Pipe injection",
        //             "Submitting a pipe character returned the string: " + helpers.bytesToString(INJ_ERROR),
        //             "High"
        //         )
        //     )
        // } else null

        return null
    }

    override fun consolidateDuplicateIssues(existingIssue: IScanIssue, newIssue: IScanIssue) =
        if (existingIssue.issueName == newIssue.issueName) -1 else 0

    companion object {
        // test / grep strings
        private val GREP_STRING = "Page generated by:".toByteArray()

        private val INJ_TEST = "|".toByteArray()
        private val INJ_ERROR = "Unexpected pipe".toByteArray()

        private val SESSION_ID_KEY = "X-Custom-Session-Id:"
        private val SESSION_ID_KEY_BYTES = SESSION_ID_KEY.toByteArray()
        private val NEWLINE_BYTES = byteArrayOf('\r'.code.toByte(), '\n'.code.toByte())
    }
}

/*
        println("==========")
        println("doActiveScan")
        println(insertionPoint)
        println(insertionPoint.insertionPointType)
        println(insertionPoint.insertionPointName)
        println(insertionPoint.baseValue)
==========
doActiveScan
burp.f3n@2515e23e
33
1
v2
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@7566348b
37
2
pet
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@d3ac8e08
6
id
0
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@8da4339b
6
name
string
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@b6ffcb9e
6
status
available
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
*/

/*
*
* =========
doActiveScan
https://httpbin.org:443/stream/3
200
burp.hy7@ce030a
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.insertionPointType: 34
=========
doActiveScan
https://httpbin.org:443/favicon.ico
404
burp.hy7@8d50500b
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.insertionPointType: 34
=========
doActiveScan
https://httpbin.org:443/stream/3
200
burp.hy7@fc768c5b
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.insertionPointType: 34
=========
doActiveScan
https://httpbin.org:443/links/5/5
=========
200
doActiveScan
burp.hy7@fe8be6d1
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.insertionPointType: 34
=========
doActiveScan
=========
doActiveScan
=========
https://httpbin.org:443/
doActiveScan
200
burp.hy7@95877357
insertionPoint.baseValue: 1
=========
insertionPoint.insertionPointName:
doActiveScan
insertionPoint.insertionPointType: 34
=========
https://httpbin.org:443/stream/31
doActiveScan
200
burp.hy7@fd21fced
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
https://httpbin.org:443/spec.json
insertionPoint.insertionPointType: 34
200
burp.hy7@c7636f97
https://httpbin.org:443/flasgger_static/lib/jquery.min.js
https://httpbin.org:443/static/favicon.ico
https://httpbin.org:443/flasgger_static/swagger-ui.css
200
insertionPoint.baseValue: 1
200
200
insertionPoint.insertionPointName:
burp.hy7@459ebdcb
burp.hy7@377035f4
burp.hy7@b95d98be
insertionPoint.baseValue: 1
insertionPoint.insertionPointType: 34
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.insertionPointName:
insertionPoint.insertionPointType: 34
insertionPoint.insertionPointType: 34
insertionPoint.insertionPointType: 34
=========
doActiveScan
=========
doActiveScan
https://httpbin.org:443/flasgger_static/swagger-ui-standalone-preset.js
200
burp.hy7@22acd3d3
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.insertionPointType: 34
https://httpbin.org:443/flasgger_static/swagger-ui-bundle.js
200
burp.hy7@4792d39f
insertionPoint.baseValue: 1
insertionPoint.insertionPointName:
insertionPoint.insertionPointType: 34









        println("==========")
        println("doActiveScan")
        println(insertionPoint)
        println(insertionPoint.insertionPointType)
        println(insertionPoint.insertionPointName)
        println(insertionPoint.baseValue)
==========
doActiveScan
burp.f3n@2515e23e
33
1
v2
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@7566348b
37
2
pet
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@d3ac8e08
6
id
0
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@8da4339b
6
name
string
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
==========
doActiveScan
burp.f3n@b6ffcb9e
6
status
available
INS_PARAM_URL: 0
INS_PARAM_BODY: 1
INS_PARAM_COOKIE: 2
INS_PARAM_XML: 3
INS_PARAM_XML_ATTR: 4
INS_PARAM_MULTIPART_ATTR: 5
INS_PARAM_JSON: 6
INS_PARAM_AMF: 7
INS_HEADER: 32
INS_URL_PATH_FOLDER: 33
INS_URL_PATH_REST: 33
INS_PARAM_NAME_URL: 34
INS_PARAM_NAME_BODY: 35
INS_ENTIRE_BODY: 36
INS_URL_PATH_FILENAME: 37
INS_USER_PROVIDED: 64
INS_EXTENSION_PROVIDED: 65
INS_UNKNOWN: 127
*/
